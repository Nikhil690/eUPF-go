// Code generated by bpf2go; DO NOT EDIT.

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadUpfXdp returns the embedded CollectionSpec for UpfXdp.
func LoadUpfXdp() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_UpfXdpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load UpfXdp: %w", err)
	}

	return spec, err
}

// LoadUpfXdpObjects loads UpfXdp and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*UpfXdpObjects
//	*UpfXdpPrograms
//	*UpfXdpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadUpfXdpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadUpfXdp()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// UpfXdpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type UpfXdpSpecs struct {
	UpfXdpProgramSpecs
	UpfXdpMapSpecs
}

// UpfXdpSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type UpfXdpProgramSpecs struct {
	UpfFunc *ebpf.ProgramSpec `ebpf:"upf_func"`
}

// UpfXdpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type UpfXdpMapSpecs struct {
	UpfPipeline *ebpf.MapSpec `ebpf:"upf_pipeline"`
}

// UpfXdpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadUpfXdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type UpfXdpObjects struct {
	UpfXdpPrograms
	UpfXdpMaps
}

func (o *UpfXdpObjects) Close() error {
	return _UpfXdpClose(
		&o.UpfXdpPrograms,
		&o.UpfXdpMaps,
	)
}

// UpfXdpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadUpfXdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type UpfXdpMaps struct {
	UpfPipeline *ebpf.Map `ebpf:"upf_pipeline"`
}

func (m *UpfXdpMaps) Close() error {
	return _UpfXdpClose(
		m.UpfPipeline,
	)
}

// UpfXdpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadUpfXdpObjects or ebpf.CollectionSpec.LoadAndAssign.
type UpfXdpPrograms struct {
	UpfFunc *ebpf.Program `ebpf:"upf_func"`
}

func (p *UpfXdpPrograms) Close() error {
	return _UpfXdpClose(
		p.UpfFunc,
	)
}

func _UpfXdpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed upfxdp_bpf.o
var _UpfXdpBytes []byte
